import logging
import sqlite3
from io import BytesIO
import secrets
from telegram import Update
import asyncio
from datetime import datetime, timedelta, timezone, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler,
    MessageHandler,
    filters
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7749755571:AAE4qmU7G04BpVzddPMjkzN3dAO9tj7qqrU"
ADMIN_IDS = [2134434120, 6639580282]
VPN_DNS = "1.1.1.1, 8.8.8.8"
KEY_EXPIRATION_DAYS = 30
WG_SERVER = {
    "public_key": "YOUR_WG_PUBLIC_KEY",
    "endpoint": "vpn.example.com:51820",
    "allowed_ips": "0.0.0.0/0",
    "dns": "1.1.1.1"
}

OVPN_SERVER = {
    "host": "vpn.example.com",
    "port": "1194",
    "proto": "udp"
}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    conn = sqlite3.connect('vpn_keys.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            key TEXT NOT NULL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            expires_at TEXT
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
user_keyboard = ReplyKeyboardMarkup(
    [["/getkey", "/dns"], ["/support"]],
    resize_keyboard=True
)

admin_keyboard = ReplyKeyboardMarkup(
    [["/stats", "/allkeys"], ["/broadcast"]],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = (
        f"üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ /getkey - –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–ª—é—á\n"
        "‚Ä¢ /dns - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ DNS\n"
        "‚Ä¢ /support - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    )
    
    if user.id in ADMIN_IDS:
        await update.message.reply_text("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_keyboard)
    
    await update.message.reply_text(text, reply_markup=user_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "wg_config":
        await generate_config(update, context, "WireGuard")
    elif query.data == "ovpn_config":
        await generate_config(update, context, "OpenVPN")

async def generate_config(update: Update, context: ContextTypes.DEFAULT_TYPE, vpn_type: str):
    user_id = update.effective_user.id
    conn = sqlite3.connect('vpn_keys.db')
    
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT key FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        
        if not result:
            await update.callback_query.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ /getkey")
            return

        user_key = result[0]
        server_public_key = "–í–ê–®_–ü–£–ë–õ–ò–ß–ù–´–ô_–ö–õ–Æ–ß_–°–ï–†–í–ï–†–ê"
        server_ip = "–í–ê–®_IP_–°–ï–†–í–ï–†–ê"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ WireGuard –¥–ª—è v2RayTun
        config = f"""[Interface]
PrivateKey = {user_key}
Address = 10.0.0.{user_id % 254}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {server_public_key}
Endpoint = {server_ip}:51820
AllowedIPs = 0.0.0.0/0"""
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
        bio = BytesIO(config.encode())
        bio.name = f"v2raytun-wg-{user_id}.conf"
        await context.bot.send_document(
            chat_id=user_id,
            document=bio,
            caption="‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è v2RayTun (WireGuard)"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.callback_query.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞")
    finally:
        conn.close()

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "wg_config":
        await generate_config(update, context, "WireGuard")
    elif query.data == "ovpn_config":
        await generate_config(update, context, "OpenVPN")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_config():
    return secrets.token_urlsafe(16)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_keyboard = ReplyKeyboardMarkup(
    [["/getkey", "/dns"], ["/support"]],
    resize_keyboard=True
)

# –ê–¥–º–∏–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
admin_keyboard = ReplyKeyboardMarkup(
    [["/stats", "/allkeys"], ["/broadcast"]],
    resize_keyboard=True
)

async def getkey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    conn = None
    try:
        conn = sqlite3.connect('vpn_keys.db')
        cursor = conn.cursor()

        cursor.execute('SELECT key, expires_at FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()

        if result and result[1]:
            expires_at = datetime.fromisoformat(result[1])
            if datetime.now(timezone.utc) < expires_at:
                await update.message.reply_text(
                    f"‚úÖ –í–∞—à –∫–ª—é—á: {result[0]}\n"
                    f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}"
                )
                return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        new_key = secrets.token_urlsafe(24)
        expires_at = datetime.now(timezone.utc) + timedelta(days=KEY_EXPIRATION_DAYS)  # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
        expires_str = expires_at.isoformat()

        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, key, expires_at)
            VALUES (?, ?, ?)
        ''', (user_id, new_key, expires_str))
        conn.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("WireGuard Config", callback_data="wg_config")],
            [InlineKeyboardButton("OpenVPN Config", callback_data="ovpn_config")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(
            f"üéâ –ù–æ–≤—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üîë –í–∞—à –∫–ª—é—á: `{new_key}`\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )

    except sqlite3.Error as e:
        logging.error(f"Database error: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        logging.error(f"Unexpected error: {e}")
        await update.message.reply_text("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        
    finally:
        if conn:
            conn.close()

async def delete_expired_keys(context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    conn = sqlite3.connect('vpn_keys.db')
    try:
        cursor = conn.cursor()
        cursor.execute('DELETE FROM users WHERE expires_at < ?', (datetime.utcnow().isoformat(),))
        conn.commit()
        logging.info(f"–£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {cursor.rowcount}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    finally:
        conn.close()

async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"üÜî –í–∞—à ID: `{user_id}`", parse_mode='Markdown')

async def main():
    application = Application.builder().token(TOKEN).build()
    
    application.job_queue.run_daily(
        delete_expired_keys,
        time=time(hour=3, minute=0, tzinfo=timezone.utc)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ timezone.utc
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("myid", myid))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getkey", getkey))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    
    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    while True:
        await asyncio.sleep(1)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    import asyncio
    asyncio.run(main())  # <-- –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è main()

async def cleanup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return
    
    count = await delete_expired_keys()
    await update.message.reply_text(f"–û—á–∏—Å—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {count}")
