import logging
import sqlite3
import secrets
from datetime import datetime, timedelta, timezone
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, Message
from aiogram.fsm.storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
import asyncio

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7749755571:AAE4qmU7G04BpVzddPMjkzN3dAO9tj7qqrU"
ADMIN_IDS = [2134434120, 6639580282]
VPN_DNS = "1.1.1.1, 8.8.8.8"
KEY_EXPIRATION_DAYS = 30
WG_SERVER_PUBLIC_KEY = "your_wg_pubkey"
SERVER_IP = "your.server.ip"
SUBSCRIPTION_PRICE = 20000

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
scheduler = AsyncIOScheduler()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    with sqlite3.connect('vpn_keys.db') as conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                key TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                expires_at TEXT
            )
        ''')

init_db()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞
def generate_key():
    return secrets.token_urlsafe(24)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def user_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/getkey", "/dns", "/buy")
    markup.row("/support", "/myid", "/ref")
    markup.row("/devices", "/servers")
    return markup

def admin_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("/stats", "/allkeys")
    markup.row("/broadcast")
    return markup

# ================= –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =================
@dp.message(Command("start"))
async def start(message: types.Message):
    text = (
        f"üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ /getkey - –ü–æ–ª—É—á–∏—Ç—å VPN-–∫–ª—é—á\n"
        "‚Ä¢ /dns - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ DNS\n"
        "‚Ä¢ /support - –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
    )

    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=admin_keyboard())
    
    await message.answer(text, reply_markup=user_keyboard())

@dp.message_handler(commands=['getkey'])
async def getkey(message: types.Message):
    user_id = message.from_user.id
    try:
        with sqlite3.connect('vpn_keys.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT key, expires_at FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()

            if result and result[1]:
                expires_at = datetime.fromisoformat(result[1])
                if datetime.now(timezone.utc) < expires_at:
                    await message.answer(
                        f"‚úÖ –í–∞—à –∫–ª—é—á: {result[0]}\n"
                        f"‚è≥ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_at.strftime('%d.%m.%Y %H:%M')}"
                    )
                    return

            new_key = generate_key()
            expires_at = datetime.now(timezone.utc) + timedelta(days=KEY_EXPIRATION_DAYS)
            cursor.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, key, expires_at)
                VALUES (?, ?, ?)
            ''', (user_id, new_key, expires_at.isoformat()))
            conn.commit()

            keyboard = InlineKeyboardMarkup()
            keyboard.row(
                InlineKeyboardButton("WireGuard Config", callback_data="wg_config"),
                InlineKeyboardButton("OpenVPN Config", callback_data="ovpn_config")
            )

            await message.answer(
                f"üéâ –ù–æ–≤—ã–π –∫–ª—é—á: `{new_key}`\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_at.strftime('%d.%m.%Y %H:%M')}\n\n"
                "üìé –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in getkey: {e}")
        await message.answer("üö´ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞")

# ================= –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =================
@dp.message_handler(commands=['dns'])
async def dns(message: types.Message):
    await message.answer(
        f"üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ DNS-—Å–µ—Ä–≤–µ—Ä—ã:\n\n"
        f"‚Ä¢ Cloudflare: `1.1.1.1`\n"
        f"‚Ä¢ Google: `8.8.8.8`\n"
        f"‚Ä¢ AdGuard: `94.140.14.14`",
        parse_mode='Markdown'
    )

@dp.message_handler(commands=['support'])
async def support(message: types.Message):
    await message.answer(
        "üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:\n\n"
        "‚Ä¢ Email: support@example.com\n"
        "‚Ä¢ Telegram: @tech_support"
    )

@dp.message_handler(commands=['myid'])
async def myid(message: types.Message):
    await message.answer(
        f"üÜî –í–∞—à Telegram ID: `{message.from_user.id}`",
        parse_mode='Markdown'
    )

# ================= –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò =================
@dp.message_handler(commands=['stats'])
async def stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    with sqlite3.connect('vpn_keys.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM users')
        total = cursor.fetchone()[0]
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n"
        f"‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞: {KEY_EXPIRATION_DAYS} –¥–Ω–µ–π"
    )

@dp.message_handler(commands=['allkeys'])
async def allkeys(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    with sqlite3.connect('vpn_keys.db') as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, key, expires_at FROM users')
        keys = cursor.fetchall()
    
    response = "üîë –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏:\n\n"
    for user_id, key, expires_at in keys:
        response += f"üë§ {user_id}: `{key}`\n‚è≥ {expires_at}\n\n"
    
    await message.answer(response[:4000], parse_mode='Markdown')

# ================= –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò VPN =================
@dp.callback_query_handler(lambda c: c.data in ['wg_config', 'ovpn_config'])
async def button_handler(callback_query: types.CallbackQuery):
    vpn_type = "WireGuard" if callback_query.data == 'wg_config' else "OpenVPN"
    await generate_config(callback_query, vpn_type)
    await bot.answer_callback_query(callback_query.id)

async def generate_config(callback_query: types.CallbackQuery, vpn_type: str):
    user_id = callback_query.from_user.id
    try:
        with sqlite3.connect('vpn_keys.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT key FROM users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            
            if not result:
                await bot.send_message(user_id, "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á —á–µ—Ä–µ–∑ /getkey")
                return

            key = result[0]
            config = ""
            filename = ""
            
            if vpn_type == "WireGuard":
                config = f"""[Interface]
PrivateKey = {key}
Address = 10.0.0.{user_id % 254}/24
DNS = 1.1.1.1

[Peer]
PublicKey = {WG_SERVER_PUBLIC_KEY}
Endpoint = {SERVER_IP}:51820
AllowedIPs = 0.0.0.0/0"""
                filename = f"wg-{user_id}.conf"
                
            elif vpn_type == "OpenVPN":
                config = f"""client
dev tun
proto udp
remote {SERVER_IP} 1194
resolv-retry infinite
nobind
persist-key
persist-tun
<ca>
-----BEGIN CERTIFICATE-----
–í–ê–®_CA_–°–ï–†–¢–ò–§–ò–ö–ê–¢
-----END CERTIFICATE-----
</ca>
<key>
{key}
</key>"""
                filename = f"ovpn-{user_id}.ovpn"

            bio = BytesIO(config.encode())
            bio.name = filename
            await bot.send_document(
                chat_id=user_id,
                document=bio,
                caption=f"‚öôÔ∏è {vpn_type} –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"
            )
    except Exception as e:
        logger.error(f"Config generation error: {e}")
        await bot.send_message(user_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞")

# ================= –ü–õ–ê–¢–ï–ñ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê =================
@dp.message_handler(commands=['buy'])
async def buy(message: types.Message):
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π", callback_data="pay_card"),
        InlineKeyboardButton("‚≠êÔ∏è Telegram Stars", callback_data="pay_stars")
    )
    await message.answer("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith('pay_'))
async def handle_payment_choice(callback_query: types.CallbackQuery):
    payment_type = callback_query.data.split('_')[1]
    
    if payment_type == "card":
        await send_card_invoice(callback_query)
    elif payment_type == "stars":
        await send_stars_invoice(callback_query)
    
    await bot.answer_callback_query(callback_query.id)

async def send_card_invoice(callback_query: types.CallbackQuery):
    await bot.send_invoice(
        callback_query.from_user.id,
        title="VPN Premium (–ö–∞—Ä—Ç–∞)",
        description="–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
        provider_token="YOUR_CARD_PROVIDER_TOKEN",
        currency="RUB",
        prices=[types.LabeledPrice("–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", 49000)],
        payload="card_payment"
    )

async def send_stars_invoice(callback_query: types.CallbackQuery):
    await bot.send_invoice(
        callback_query.from_user.id,
        title="VPN Premium (Stars)",
        description="–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü",
        provider_token="YOUR_STARS_PROVIDER_TOKEN",
        currency="XTR",
        prices=[types.LabeledPrice("–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", 50 * 100)],
        payload="stars_payment"
    )

@dp.pre_checkout_query_handler()
async def precheckout(query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(query.id, ok=True)

@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    user_id = message.from_user.id
    expires_at = datetime.now(timezone.utc) + timedelta(days=30)
    
    with sqlite3.connect('vpn_keys.db') as conn:
        conn.execute('''
            UPDATE users 
            SET expires_at = ? 
            WHERE user_id = ?
        ''', (expires_at.isoformat(), user_id))
        conn.commit()
    
    await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")

# ================= –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –ó–ê–î–ê–ß =================
async def check_subscriptions():
    try:
        with sqlite3.connect('vpn_keys.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM users WHERE expires_at < ?", 
                         (datetime.now(timezone.utc).isoformat(),))
            
            for user_id, in cursor.fetchall():
                await bot.send_message(
                    user_id,
                    "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è! –ü—Ä–æ–¥–ª–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /buy"
                )
    except Exception as e:
        logger.error(f"Subscription check error: {e}")

async def on_startup(dp):
    scheduler.add_job(check_subscriptions, 'interval', days=1)
    scheduler.start()

async def main():
    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
    scheduler.add_job(
        check_subscriptions,
        IntervalTrigger(days=1),
        args=[dp]  # –ü–µ—Ä–µ–¥–∞–µ–º dp –≤–º–µ—Å—Ç–æ application
    )
    scheduler.start()

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())